AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless_demo

  Sample SAM Template for serverless_demo

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 2048
    Environment:
      Variables:
        SECRET_KEY: secret-info

Resources:
#  HelloWorldFunction:
#    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
#    Properties:
#      CodeUri: hello_world/
#      Handler: app.lambda_handler
#      Runtime: python3.9
#      Architectures:
#        - x86_64
#      Events:
#        HelloWorld:
#          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
#          Properties:
#            Path: /hello
#            Method: get


  MyApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: JWTCustomAuthorizer
        Authorizers:
          JWTCustomAuthorizer:
            FunctionArn: !GetAtt JWTAuthFunction.Arn

  JWTAuthFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: organizations/user/
      Handler: auth.app.lambda_handler
      Runtime: python3.8

  OrganizationUserLogin:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: organizations/user/
      Handler: login.app.lambda_handler
      Runtime: python3.8
      Events:
        LoginAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: '/user/login'
            Method: POST
            Auth:
              Authorizer: NONE

  OrganizationRefreshToken:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: organizations/user/
      Handler: login.app.token_refresh
      Runtime: python3.8
      Events:
        RefreshTokenAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: '/user/refresh-token'
            Method: POST

  OrganizationUserCreate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: organizations/user/
      Handler: create.app.lambda_handler
      Runtime: python3.9
      Events:
        CompanyCreateUserPostAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi  # to work only if client authorized
            Path: '/user'
            Method: POST
            Auth:
              Authorizer: NONE

  OrganizationUserRead:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: organizations/user/
      Handler: read.app.lambda_handler
      Runtime: python3.9
      Events:
        CompanyUserGetAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi  # to work only if client authorized
            Path: '/user'
            Method: GET
#            Auth:
#              Authorizer: NONE

  OrganizationUserReadByID:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: organizations/user/
      Handler: read.app.lambda_handler
      Runtime: python3.9
      Events:
        CompanyUserGetByIdAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi  # to work only if client authorized
            Path: '/user/{Id}'
            Method: GET
#            Auth:
#              Authorizer: NONE

  OrganizationUserUpdateByID:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: organizations/user/
      Handler: update.app.lambda_handler
      Runtime: python3.9
      Events:
        CompanyUserUpdateByIdAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi  # to work only if client authorized
            Path: '/user/{Id}'
            Method: PATCH
#            Auth:
#              Authorizer: NONE

  OrganizationUserDeleteByID:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: organizations/user/
      Handler: delete.app.lambda_handler
      Runtime: python3.9
      Events:
        CompanyUserDeleteByIdAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi  # to work only if client authorized
            Path: '/user/{Id}'
            Method: DELETE
#            Auth:
#              Authorizer: NONE

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
